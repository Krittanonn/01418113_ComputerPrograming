import java.awt.*;
import javax.swing.*;

public class GamechessPlay extends JFrame {
    private JButton[][] boardButtons = new JButton[8][8];
    private boolean isPieceSelected = false;
    private int selectedRow = -1;
    private int selectedCol = -1;
    private int blackScore = 0;
    private int whiteScore = 0;
    private JLabel blackScoreLabel;
    private JLabel whiteScoreLabel;
    private JLabel timerLabel;
    private JLabel currentPlayerLabel;
    private Timer timer;
    private int timeElapsed = 0;
    private boolean isBlackTurn = true;
    private int blackTimeElapsed = 0;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏≥
    private int whiteTimeElapsed = 0;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≤‡∏ß

    public GamechessPlay() {
        super("Checkers");
        setLayout(new BorderLayout());

        add(createBoard(), BorderLayout.CENTER);
        add(createGamePanel(), BorderLayout.EAST);

        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private JPanel createBoard() {
        JPanel panel = new JPanel(new GridLayout(8, 8));
        Color lightSquare = new Color(238, 238, 210);
        Color darkSquare = new Color(118, 150, 86);

        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                boardButtons[row][col] = new JButton();
                boardButtons[row][col].setOpaque(true);
                boardButtons[row][col].setBorderPainted(false);
                boardButtons[row][col].setBackground((row + col) % 2 == 0 ? lightSquare : darkSquare);
                
                if ((row + col) % 2 != 0) {
                    if (row < 2) boardButtons[row][col].setText("‚ö´");
                    else if (row > 5) boardButtons[row][col].setText("‚ö™");
                }
                
                int finalRow = row, finalCol = col;
                boardButtons[row][col].addActionListener(e -> handleMove(finalRow, finalCol));
                panel.add(boardButtons[row][col]);
            }
        }
        return panel;
    }

    private JPanel createGamePanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setPreferredSize(new Dimension(200, 0));
        panel.setBackground(new Color(200, 200, 200));

        timerLabel = new JLabel("Time: 00:00");
        blackScoreLabel = new JLabel("Black Score: 0");
        whiteScoreLabel = new JLabel("White Score: 0");
        currentPlayerLabel = new JLabel("Current Player: Black");
        JButton startButton = new JButton("START");
        JButton resetButton = new JButton("RESET");

        startButton.addActionListener(e -> startGame());
        resetButton.addActionListener(e -> resetGame());

        panel.add(Box.createVerticalGlue());
        panel.add(new JLabel("Game Panel", SwingConstants.CENTER));
        panel.add(timerLabel);
        panel.add(blackScoreLabel);
        panel.add(whiteScoreLabel);
        panel.add(currentPlayerLabel);
        panel.add(startButton);
        panel.add(resetButton);
        panel.add(Box.createVerticalGlue());

        return panel;
    }

    private void handleMove(int row, int col) {
        if (!isPieceSelected) {
            String piece = boardButtons[row][col].getText();
            if ((isBlackTurn && piece.equals("‚ö´")) || (!isBlackTurn && piece.equals("‚ö™"))) {
                isPieceSelected = true;
                selectedRow = row;
                selectedCol = col;
                boardButtons[row][col].setBackground(Color.YELLOW);
            }
        } else {
            if (isValidMove(row, col)) {
                movePiece(row, col);
                isBlackTurn = !isBlackTurn;
                currentPlayerLabel.setText("Current Player: " + (isBlackTurn ? "Black" : "White"));
            }
            isPieceSelected = false;
            resetHighlights();
        }
    }
    

    private boolean isValidMove(int row, int col) {
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        if (!boardButtons[row][col].getText().isEmpty()) return false;
    
        // 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        int rowDiff = row - selectedRow;  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß
        int colDiff = Math.abs(col - selectedCol);  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å)
    
        String piece = boardButtons[selectedRow][selectedCol].getText(); // ‡∏´‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    
        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡πÅ‡∏¢‡∏á (‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 1 ‡∏ä‡πà‡∏≠‡∏á)
        if (piece.equals("‚ö™") && rowDiff != -1) return false;  // ‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏•‡∏á 1 ‡∏ä‡πà‡∏≠‡∏á
        if (piece.equals("‚ö´") && rowDiff != 1) return false;   // ‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á
    
        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á (‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤-‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á)
        if (colDiff != 1 && Math.abs(rowDiff) != 2) return false; // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô
        if (Math.abs(rowDiff) == 2) {  // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
            int midRow = (selectedRow + row) / 2;  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
            int midCol = (selectedCol + col) / 2;  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
    
            String capturedPiece = boardButtons[midRow][midCol].getText(); // ‡∏´‡∏°‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á
            if (capturedPiece.isEmpty()) return false; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á
            if (capturedPiece.equals(piece)) return false; // ‡∏´‡∏°‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
        }
    
        return true;  // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ
    }
    
    

    private void movePiece(int row, int col) {
        String piece = boardButtons[selectedRow][selectedCol].getText();
    
        if (Math.abs(row - selectedRow) == 2) {
            int capturedRow = (selectedRow + row) / 2;
            int capturedCol = (selectedCol + col) / 2;
            boardButtons[capturedRow][capturedCol].setText("");  // ‡∏•‡∏ö‡∏´‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
            if (piece.equals("‚ö™")) blackScore++;  // ‡∏´‡∏°‡∏≤‡∏Ç‡∏≤‡∏ß‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            else whiteScore++;  // ‡∏´‡∏°‡∏≤‡∏î‡∏≥‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            blackScoreLabel.setText("Black Score: " + blackScore);
            whiteScoreLabel.setText("White Score: " + whiteScore);
        }
    
        boardButtons[selectedRow][selectedCol].setText("");  // ‡∏•‡∏ö‡∏´‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        boardButtons[row][col].setText(piece);  // ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏≤‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏° (King)
        if ((piece.equals("‚ö™") && row == 0) || (piece.equals("‚ö´") && row == 7)) {
            boardButtons[row][col].setText("üëë");  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏°
        }
    
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞
        if (blackScore >= 8 || whiteScore >= 8) {
            JOptionPane.showMessageDialog(this, (blackScore >= 8 ? "Black" : "White") + " Wins!");
            resetGame();  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
        }
    }
    
    

    private void resetHighlights() {
        Color lightSquare = new Color(238, 238, 210);
        Color darkSquare = new Color(118, 150, 86);
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                boardButtons[row][col].setBackground((row + col) % 2 == 0 ? lightSquare : darkSquare);
            }
        }
    }

    private void startGame() {
        blackScore = 0;
        whiteScore = 0;
        blackScoreLabel.setText("Black Score: 0");
        whiteScoreLabel.setText("White Score: 0");

        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                boardButtons[row][col].setText("");
                if ((row + col) % 2 != 0 && row < 2) {
                    boardButtons[row][col].setText("‚ö´");
                }
                else if ((row + col) % 2 != 0 && row > 5) {
                    boardButtons[row][col].setText("‚ö™");
                }
            }
        }
    
        isBlackTurn = true;
        currentPlayerLabel.setText("Current Player: Black");
    
        timeElapsed = 0;
        blackTimeElapsed = 0;
        whiteTimeElapsed = 0;
        if (timer != null && timer.isRunning()) {
            timer.stop();
        }
        timer = new Timer(1000, e -> {
            timeElapsed++;
            if (isBlackTurn) blackTimeElapsed++;
            else whiteTimeElapsed++;

            int minutes = timeElapsed / 60;
            int seconds = timeElapsed % 60;
            timerLabel.setText(String.format("Time: %02d:%02d", minutes, seconds));
        });
        timer.start();
    }

    private void resetGame() {
        blackScore = 0;
        whiteScore = 0;
        blackScoreLabel.setText("Black Score: 0");
        whiteScoreLabel.setText("White Score: 0");
        
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                boardButtons[row][col].setText("");  
                if ((row + col) % 2 != 0 && row < 2) {
                    boardButtons[row][col].setText("‚ö´");
                }
                else if ((row + col) % 2 != 0 && row > 5) {
                    boardButtons[row][col].setText("‚ö™");
                }
            }
        }
    
        isBlackTurn = true;  
        currentPlayerLabel.setText("Current Player: Black");
    
        timeElapsed = 0;
        blackTimeElapsed = 0;
        whiteTimeElapsed = 0;
        if (timer != null && timer.isRunning()) {
            timer.stop();
        }
        timerLabel.setText("Time: 00:00");
    
        timer = new Timer(1000, e -> {
            timeElapsed++;
            if (isBlackTurn) blackTimeElapsed++;
            else whiteTimeElapsed++;

            int minutes = timeElapsed / 60;
            int seconds = timeElapsed % 60;
            timerLabel.setText(String.format("Time: %02d:%02d", minutes, seconds));
        });
        timer.start();
    }
}
